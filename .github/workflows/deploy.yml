on:
  workflow_run:
    workflows: ["Run tests"]
    branches:
      - docker
      - staging
    types:
      - completed

name: Deploy to AWS ECS

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_run.head_branch }}

    - name: Docker Layer Caching
      uses: satackey/action-docker-layer-caching@v0.0.8
      continue-on-error: true

    - name: Configure AWS credentials
      id: aws-config
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Inject slug and short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Build and publish image
      id: build-image
      uses: fagiani/buildpacks-action@v0.3.0
      with:
        registry: ${{ steps.aws-config.outputs.aws-account-id }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        image: ${{ env.GITHUB_REPOSITORY_SLUG }}-${{ github.event.workflow_run.head_branch }}

        tag: ${{ env.GITHUB_SHA_SHORT }}
        path: .
        buildpacks: 'heroku/ruby'
        builder: 'heroku/buildpacks:18'
        env:
          RAILS_ENV=staging
          RAKE_ENV=staging
          GHENVTEST=${{ env.GITHUB_SHA_SHORT }}
        publish: true

    # BUNDLE_GITHUB__COM=${{ secrets.BUNDLE_GITHUB }}
    # - name: Render web AWS ECS Task Definition
    #   id: task-def-web
    #   uses: fagiani/amazon-ecs-render-task-definition@master
    #   with:
    #     task-definition: .aws/ecs/task-definition-web.json
    #     family-name: ${{ env.GITHUB_REPOSITORY_SLUG }}-${{ github.event.workflow_run.head_branch }}-web
    #     container-name: ${{ env.GITHUB_REPOSITORY_SLUG }}-web
    #     image: ${{ steps.build-image.outputs.image-name }}
    #     aws-sm-name: ${{ secrets.AWS_SM_ENV_VARS }}
    #     aws-account-id: ${{ steps.aws-config.outputs.aws-account-id }}
    #     aws-sm-arns: true
    #     use-secrets: true

    # - name: Render worker AWS ECS Task Definition
    #   id: task-def-worker
    #   uses: fagiani/amazon-ecs-render-task-definition@master
    #   with:
    #     task-definition: .aws/ecs/task-definition-worker.json
    #     family-name: ${{ env.GITHUB_REPOSITORY_SLUG }}-${{ github.event.workflow_run.head_branch }}-worker
    #     container-name: ${{ env.GITHUB_REPOSITORY_SLUG }}-worker
    #     image: ${{ steps.build-image.outputs.image-name }}
    #     aws-sm-name: ${{ secrets.AWS_SM_ENV_VARS }}
    #     aws-account-id: ${{ steps.aws-config.outputs.aws-account-id }}
    #     aws-sm-arns: true
    #     use-secrets: true

    - name: Render rake AWS ECS Task Definition
      id: task-def-rake
      uses: fagiani/amazon-ecs-render-task-definition@master
      with:
        task-definition: .aws/ecs/task-definition-rake.json
        family-name: ${{ env.GITHUB_REPOSITORY_SLUG }}-${{ github.event.workflow_run.head_branch }}-rake
        container-name: ${{ env.GITHUB_REPOSITORY_SLUG }}-rake
        image: ${{ steps.build-image.outputs.image-name }}
        aws-sm-name: ${{ secrets.AWS_SM_ENV_VARS }}
        aws-account-id: ${{ steps.aws-config.outputs.aws-account-id }}
        aws-sm-arns: true
        use-secrets: true

    # - name: Deploy web process to AWS ECS
    #   if: ${{ steps.task-def-web.conclusion == 'success' }}
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def-web.outputs.task-definition }}
    #     service: auth-web-staging
    #     cluster: growthhackers-staging
    #     wait-for-service-stability: false

    # - name: Deploy worker process to AWS ECS
    #   if: ${{ steps.task-def-web.conclusion == 'success' && steps.task-def-worker.conclusion == 'success' }}
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def-worker.outputs.task-definition }}
    #     service: auth-worker-staging
    #     cluster: growthhackers-staging
    #     wait-for-service-stability: false

    - name: Deploy rake process to AWS ECS
      if: ${{ steps.task-def-web.conclusion == 'success' && steps.task-def-worker.conclusion == 'success' && steps.task-def-rake.conclusion == 'success' }}
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-rake.outputs.task-definition }}
        service: auth-rake-staging
        cluster: growthhackers-staging
        wait-for-service-stability: false

    - name: Execute Rake
      uses: apfm-actions/aws-ecs-exec-action@master
      with:
        task_name: ${{ steps.task-def-rake.outputs.task-definition }}
        wait: true
        timeout: 600